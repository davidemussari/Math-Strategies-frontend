import * as tslib_1 from "tslib";
/*
 * Copyright (c) 2016-2019 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { animate, style, transition, trigger } from '@angular/animations';
import { Component, EventEmitter, HostBinding, HostListener, Input, Output, ViewChild, Inject, ElementRef, PLATFORM_ID, } from '@angular/core';
import { FocusTrapDirective } from '../utils/focus-trap/focus-trap.directive';
import { ScrollingService } from '../utils/scrolling/scrolling-service';
import { ClrCommonStringsService } from '../utils/i18n/common-strings.service';
import { UNIQUE_ID, UNIQUE_ID_PROVIDER } from '../utils/id-generator/id-generator.service';
import { isPlatformBrowser } from '@angular/common';
var ClrModal = /** @class */ (function () {
    function ClrModal(_scrollingService, commonStrings, platformId, modalId) {
        this._scrollingService = _scrollingService;
        this.commonStrings = commonStrings;
        this.platformId = platformId;
        this.modalId = modalId;
        this._open = false;
        this._openChanged = new EventEmitter(false);
        this.closable = true;
        this.staticBackdrop = true;
        this.skipAnimation = 'false';
        // presently this is only used by wizards
        this.bypassScrollService = false;
        this.stopClose = false;
        this.altClose = new EventEmitter(false);
    }
    // Detect when _open is set to true and set no-scrolling to true
    ClrModal.prototype.ngOnChanges = function (changes) {
        if (!this.bypassScrollService && changes && changes.hasOwnProperty('_open')) {
            if (changes._open.currentValue) {
                this._scrollingService.stopScrolling();
            }
            else {
                this._scrollingService.resumeScrolling();
            }
        }
    };
    ClrModal.prototype.ngOnDestroy = function () {
        this._scrollingService.resumeScrolling();
    };
    ClrModal.prototype.open = function () {
        if (this._open) {
            return;
        }
        this._open = true;
        this._openChanged.emit(true);
    };
    ClrModal.prototype.close = function () {
        if (this.stopClose) {
            this.altClose.emit(false);
            return;
        }
        if (!this.closable || !this._open) {
            return;
        }
        this._open = false;
        // todo: remove this after animation bug is fixed https://github.com/angular/angular/issues/15798
        // this was handled by the fadeDone event below, but that AnimationEvent is not firing in Angular 4.0.
        this._openChanged.emit(false);
        // SPECME
        this.focusTrap.setPreviousFocus(); // Handles moving focus back to the element that had it before.
    };
    // TODO Investigate if we can decouple from animation events
    ClrModal.prototype.fadeDone = function (e) {
        if (e.toState === 'void') {
            this._openChanged.emit(false);
        }
        else if (e.toState === 'false' && isPlatformBrowser(this.platformId) && this.modalTitle) {
            this.modalTitle.nativeElement.focus();
        }
    };
    tslib_1.__decorate([
        ViewChild(FocusTrapDirective, { static: false }),
        tslib_1.__metadata("design:type", FocusTrapDirective)
    ], ClrModal.prototype, "focusTrap", void 0);
    tslib_1.__decorate([
        ViewChild('modalTitle', { static: false }),
        tslib_1.__metadata("design:type", ElementRef)
    ], ClrModal.prototype, "modalTitle", void 0);
    tslib_1.__decorate([
        HostBinding('class.open'),
        Input('clrModalOpen'),
        tslib_1.__metadata("design:type", Boolean)
    ], ClrModal.prototype, "_open", void 0);
    tslib_1.__decorate([
        Output('clrModalOpenChange'),
        tslib_1.__metadata("design:type", EventEmitter)
    ], ClrModal.prototype, "_openChanged", void 0);
    tslib_1.__decorate([
        Input('clrModalClosable'),
        tslib_1.__metadata("design:type", Boolean)
    ], ClrModal.prototype, "closable", void 0);
    tslib_1.__decorate([
        Input('clrModalSize'),
        tslib_1.__metadata("design:type", String)
    ], ClrModal.prototype, "size", void 0);
    tslib_1.__decorate([
        Input('clrModalStaticBackdrop'),
        tslib_1.__metadata("design:type", Boolean)
    ], ClrModal.prototype, "staticBackdrop", void 0);
    tslib_1.__decorate([
        Input('clrModalSkipAnimation'),
        tslib_1.__metadata("design:type", String)
    ], ClrModal.prototype, "skipAnimation", void 0);
    tslib_1.__decorate([
        Input('clrModalOverrideScrollService'),
        tslib_1.__metadata("design:type", Boolean)
    ], ClrModal.prototype, "bypassScrollService", void 0);
    tslib_1.__decorate([
        Input('clrModalPreventClose'),
        tslib_1.__metadata("design:type", Boolean)
    ], ClrModal.prototype, "stopClose", void 0);
    tslib_1.__decorate([
        Output('clrModalAlternateClose'),
        tslib_1.__metadata("design:type", EventEmitter)
    ], ClrModal.prototype, "altClose", void 0);
    tslib_1.__decorate([
        HostListener('body:keyup.escape'),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", void 0)
    ], ClrModal.prototype, "close", null);
    ClrModal = tslib_1.__decorate([
        Component({
            selector: 'clr-modal',
            viewProviders: [ScrollingService],
            template: "\n<!--\n  ~ Copyright (c) 2016-2019 VMware, Inc. All Rights Reserved.\n  ~ This software is released under MIT license.\n  ~ The full license information can be found in LICENSE in the root directory of this project.\n  -->\n\n<div clrFocusTrap class=\"modal\" *ngIf=\"_open\">\n    <!--fixme: revisit when ngClass works with exit animation-->\n    <div [@fadeDown]=\"skipAnimation\" (@fadeDown.done)=\"fadeDone($event)\"\n         class=\"modal-dialog\"\n         [class.modal-sm]=\"size == 'sm'\"\n         [class.modal-lg]=\"size == 'lg'\"\n         [class.modal-xl]=\"size == 'xl'\"\n         role=\"dialog\"\n         aria-modal=\"true\"\n         [attr.aria-hidden]=\"!_open\"\n         [attr.aria-labelledby]=\"modalId\">\n      <div class=\"clr-sr-only\">{{commonStrings.keys.modalContentStart}}</div>\n      <div class=\"modal-content-wrapper\">\n        <!-- only used in wizards -->\n        <ng-content select=\".modal-nav\"></ng-content>\n\n        <div class=\"modal-content\">\n          <div class=\"modal-header\">\n            <button type=\"button\" [attr.aria-label]=\"commonStrings.keys.close\" class=\"close\" *ngIf=\"closable\" (click)=\"close()\">\n              <clr-icon shape=\"close\"></clr-icon>\n            </button>\n            <div class=\"modal-title-wrapper\" tabindex=\"0\" id=\"{{modalId}}\" #modalTitle>\n              <ng-content select=\".modal-title\"></ng-content>\n            </div>\n          </div>\n          <ng-content select=\".modal-body\"></ng-content>\n          <ng-content select=\".modal-footer\"></ng-content>\n        </div>\n      </div>\n      <div class=\"clr-sr-only\">{{commonStrings.keys.modalContentEnd}}</div>\n    </div>\n\n    <div [@fade] class=\"modal-backdrop\"\n         aria-hidden=\"true\"\n         (click)=\"staticBackdrop || close()\"></div>\n</div>\n\n",
            animations: [
                trigger('fadeDown', [
                    transition('* => false', [style({ opacity: 0, transform: 'translate(0, -25%)' }), animate('0.2s ease-in-out')]),
                    transition('false => *', [animate('0.2s ease-in-out', style({ opacity: 0, transform: 'translate(0, -25%)' }))]),
                ]),
                trigger('fade', [
                    transition('void => *', [style({ opacity: 0 }), animate('0.2s ease-in-out', style({ opacity: 0.85 }))]),
                    transition('* => void', [animate('0.2s ease-in-out', style({ opacity: 0 }))]),
                ]),
            ],
            providers: [UNIQUE_ID_PROVIDER],
            styles: ["\n        :host { display: none; }\n        :host.open { display: inline; }\n    "]
        }),
        tslib_1.__param(2, Inject(PLATFORM_ID)),
        tslib_1.__param(3, Inject(UNIQUE_ID)),
        tslib_1.__metadata("design:paramtypes", [ScrollingService,
            ClrCommonStringsService,
            Object, String])
    ], ClrModal);
    return ClrModal;
}());
export { ClrModal };
//# sourceMappingURL=data:application/json;base64,