import * as tslib_1 from "tslib";
/*
 * Copyright (c) 2016-2019 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Component, EventEmitter, Input, Output, ElementRef, NgZone, Inject, PLATFORM_ID, } from '@angular/core';
import { Point } from '../../popover/common/popover';
import { RowActionService } from './providers/row-action-service';
import { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';
import { isPlatformBrowser } from '@angular/common';
let clrDgActionId = 0;
let ClrDatagridActionOverflow = class ClrDatagridActionOverflow {
    constructor(rowActionService, commonStrings, elementRef, platformId, zone) {
        this.rowActionService = rowActionService;
        this.commonStrings = commonStrings;
        this.elementRef = elementRef;
        this.platformId = platformId;
        this.zone = zone;
        this.anchorPoint = Point.RIGHT_CENTER;
        this.popoverPoint = Point.LEFT_CENTER;
        /**
         * Tracks whether the action overflow menu is open or not
         */
        this._open = false;
        this.openChanged = new EventEmitter(false);
        this.rowActionService.register();
        this.popoverId = 'clr-action-menu' + clrDgActionId++;
    }
    ngOnDestroy() {
        this.rowActionService.unregister();
    }
    get open() {
        return this._open;
    }
    set open(open) {
        const boolOpen = !!open;
        if (boolOpen !== this._open) {
            this._open = boolOpen;
            this.openChanged.emit(boolOpen);
            if (boolOpen && isPlatformBrowser(this.platformId)) {
                this.zone.runOutsideAngular(() => {
                    setTimeout(() => {
                        const firstButton = this.elementRef.nativeElement.querySelector('button.action-item');
                        if (firstButton) {
                            firstButton.focus();
                        }
                    });
                });
            }
        }
    }
    /**
     * Shows/hides the action overflow menu
     */
    toggle(event) {
        this.openingEvent = event;
        this.open = !this.open;
    }
    close(event) {
        /*
             * Because this listener is added synchronously, before the event finishes bubbling up the DOM,
             * we end up firing on the very click that just opened the menu,
             * potentially closing it immediately every time. So we just ignore it.
             */
        if (event === this.openingEvent) {
            delete this.openingEvent;
            return;
        }
        this.open = false;
    }
};
tslib_1.__decorate([
    Input('clrDgActionOverflowOpen'),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [Boolean])
], ClrDatagridActionOverflow.prototype, "open", null);
tslib_1.__decorate([
    Output('clrDgActionOverflowOpenChange'),
    tslib_1.__metadata("design:type", Object)
], ClrDatagridActionOverflow.prototype, "openChanged", void 0);
ClrDatagridActionOverflow = tslib_1.__decorate([
    Component({
        selector: 'clr-dg-action-overflow',
        template: `
        <button (click)="toggle($event)" type="button" class="datagrid-action-toggle" #anchor role="button" 
                    aria-haspopup="true" [attr.aria-controls]="popoverId" [attr.aria-expanded]="open">
            <clr-icon shape="ellipsis-vertical" [attr.title]="commonStrings.keys.rowActions"></clr-icon>
        </button>
        <ng-template [(clrPopoverOld)]="open" [clrPopoverOldAnchor]="anchor" [clrPopoverOldAnchorPoint]="anchorPoint"
                     [clrPopoverOldPopoverPoint]="popoverPoint">
            <div class="datagrid-action-overflow" (clrOutsideClick)="close($event)" [clrStrict]="true" 
                    role="menu" [attr.id]="popoverId" [attr.aria-hidden]="!open">
                <ng-content></ng-content>
            </div>
        </ng-template>
    `
    }),
    tslib_1.__param(3, Inject(PLATFORM_ID)),
    tslib_1.__metadata("design:paramtypes", [RowActionService,
        ClrCommonStringsService,
        ElementRef,
        Object,
        NgZone])
], ClrDatagridActionOverflow);
export { ClrDatagridActionOverflow };
//# sourceMappingURL=data:application/json;base64,