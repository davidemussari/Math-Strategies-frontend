import * as tslib_1 from "tslib";
/*
 * Copyright (c) 2016-2019 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Component, ContentChild, ElementRef, Inject, NgZone, PLATFORM_ID, ViewChild } from '@angular/core';
import { Point } from '../../popover/common/popover';
import { ClrDatagridColumnToggleButton } from './datagrid-column-toggle-button';
import { ClrDatagridColumnToggleTitle } from './datagrid-column-toggle-title';
import { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';
import { ColumnsService } from './providers/columns.service';
import { DatagridColumnChanges } from './enums/column-changes.enum';
import { isPlatformBrowser } from '@angular/common';
import { UNIQUE_ID_PROVIDER, UNIQUE_ID } from '../../utils/id-generator/id-generator.service';
let ClrDatagridColumnToggle = 
/** @deprecated since 2.0, remove in 3.0 */
class ClrDatagridColumnToggle {
    constructor(commonStrings, columnsService, columnSwitchId, platformId, zone) {
        this.commonStrings = commonStrings;
        this.columnsService = columnsService;
        this.columnSwitchId = columnSwitchId;
        this.platformId = platformId;
        this.zone = zone;
        /***
         * Popover init
         */
        this.anchorPoint = Point.TOP_LEFT;
        this.popoverPoint = Point.LEFT_BOTTOM;
        this.open = false;
    }
    get hideableColumnStates() {
        const hideables = this.columnsService.columns.filter(column => column.value.hideable);
        return hideables.map(column => column.value);
    }
    get hasOnlyOneVisibleColumn() {
        const nbNonHideableColumns = this.columnsService.columns.length - this.hideableColumnStates.length;
        // this should only return true when there is no non-hideable columns.
        return (nbNonHideableColumns === 0 && this.hideableColumnStates.filter(columnState => !columnState.hidden).length === 1);
    }
    toggleColumnState(columnState, event) {
        const columnToToggle = this.columnsService.columns.filter(column => column.value === columnState)[0];
        this.columnsService.emitStateChange(columnToToggle, {
            hidden: event,
            changes: [DatagridColumnChanges.HIDDEN],
        });
    }
    toggleSwitchPanel() {
        this.open = !this.open;
        if (this.open && isPlatformBrowser(this.platformId) && this.menuDescriptionElement) {
            this.zone.runOutsideAngular(() => {
                setTimeout(() => {
                    this.menuDescriptionElement.nativeElement.focus();
                });
            });
        }
    }
    allColumnsSelected() {
        this.allSelectedElement.nativeElement.focus();
    }
    // Without tracking the checkboxes get rerendered on model update, which leads
    // to loss of focus after checkbox toggle.
    trackByFn(index) {
        return index;
    }
};
tslib_1.__decorate([
    ContentChild(ClrDatagridColumnToggleTitle, { static: false }),
    tslib_1.__metadata("design:type", ClrDatagridColumnToggleTitle)
], ClrDatagridColumnToggle.prototype, "customToggleTitle", void 0);
tslib_1.__decorate([
    ContentChild(ClrDatagridColumnToggleButton, { static: false }),
    tslib_1.__metadata("design:type", ClrDatagridColumnToggleButton)
], ClrDatagridColumnToggle.prototype, "customToggleButton", void 0);
tslib_1.__decorate([
    ViewChild('menuDescription', { read: ElementRef, static: false }),
    tslib_1.__metadata("design:type", ElementRef)
], ClrDatagridColumnToggle.prototype, "menuDescriptionElement", void 0);
tslib_1.__decorate([
    ViewChild('allSelected', { read: ElementRef, static: false }),
    tslib_1.__metadata("design:type", ElementRef)
], ClrDatagridColumnToggle.prototype, "allSelectedElement", void 0);
ClrDatagridColumnToggle = tslib_1.__decorate([
    Component({
        selector: 'clr-dg-column-toggle',
        template: `
    <button
      #anchor
      (click)="toggleSwitchPanel()"
      class="btn btn-sm btn-link column-toggle--action"
      [attr.aria-controls]="columnSwitchId"
      type="button">
      <clr-icon shape="view-columns" [attr.title]="commonStrings.keys.pickColumns"></clr-icon>
    </button>
    <div [id]="columnSwitchId" class="column-switch"
         *clrPopoverOld="open; anchor: anchor; anchorPoint: anchorPoint; popoverPoint: popoverPoint">
      <div class="switch-header">
        <div class="clr-sr-only" tabindex="-1" #menuDescription>{{commonStrings.keys.showColumnsMenuDescription}}</div>
        <div class="clr-sr-only" tabindex="-1" #allSelected>{{commonStrings.keys.allColumnsSelected}}</div>
        <ng-container *ngIf="!customToggleTitle">{{commonStrings.keys.showColumns}}</ng-container>
        <ng-content select="clr-dg-column-toggle-title"></ng-content>
        <button
          class="btn btn-sm btn-link toggle-switch-close-button"
          (click)="toggleSwitchPanel()"
          [attr.aria-label]="commonStrings.keys.close"
          type="button">
          <clr-icon shape="close" [attr.title]="commonStrings.keys.close"></clr-icon>
        </button>
      </div>
      <ul class="switch-content list-unstyled">
        <li *ngFor="let columnState of hideableColumnStates;trackBy: trackByFn">
          <clr-checkbox-wrapper>
            <input clrCheckbox type="checkbox"
                   [disabled]="hasOnlyOneVisibleColumn && !columnState.hidden"
                   [ngModel]="!columnState.hidden"
                   (ngModelChange)="toggleColumnState(columnState, !$event)">
            <label>
              <ng-template [ngTemplateOutlet]="columnState.titleTemplateRef"></ng-template>
            </label>
          </clr-checkbox-wrapper>
        </li>
      </ul>
      <div class="switch-footer">
        <ng-content select="clr-dg-column-toggle-button"></ng-content>
        <clr-dg-column-toggle-button *ngIf="!customToggleButton" (clrAllSelected)="allColumnsSelected()">
          {{commonStrings.keys.selectAll}}
        </clr-dg-column-toggle-button>
      </div>
    </div>
  `,
        host: { '[class.column-switch-wrapper]': 'true', '[class.active]': 'open' },
        providers: [UNIQUE_ID_PROVIDER]
    })
    /** @deprecated since 2.0, remove in 3.0 */
    ,
    tslib_1.__param(2, Inject(UNIQUE_ID)),
    tslib_1.__param(3, Inject(PLATFORM_ID)),
    tslib_1.__metadata("design:paramtypes", [ClrCommonStringsService,
        ColumnsService, String, Object,
        NgZone])
], ClrDatagridColumnToggle);
export { ClrDatagridColumnToggle };
//# sourceMappingURL=data:application/json;base64,