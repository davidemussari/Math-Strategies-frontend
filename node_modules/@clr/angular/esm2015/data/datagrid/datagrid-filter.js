import * as tslib_1 from "tslib";
var ClrDatagridFilter_1;
/*
 * Copyright (c) 2016-2019 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Component, ElementRef, EventEmitter, Inject, Input, Output, PLATFORM_ID, ViewChild } from '@angular/core';
import { Point } from '../../popover/common/popover';
import { CustomFilter } from './providers/custom-filter';
import { FiltersProvider } from './providers/filters';
import { DatagridFilterRegistrar } from './utils/datagrid-filter-registrar';
import { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';
import { isPlatformBrowser } from '@angular/common';
/**
 * Custom filter that can be added in any column to override the default object property string filter.
 * The reason this is not just an input on DatagridColumn is because we need the filter's template to be projected,
 * since it can be anything (not just a text input).
 */
let ClrDatagridFilter = ClrDatagridFilter_1 = class ClrDatagridFilter extends DatagridFilterRegistrar {
    constructor(_filters, commonStrings, platformId) {
        super(_filters);
        this.commonStrings = commonStrings;
        this.platformId = platformId;
        this.anchorPoint = Point.RIGHT_BOTTOM;
        this.popoverPoint = Point.RIGHT_TOP;
        this.popoverOptions = { allowMultipleOpen: true };
        /**
         * Tracks whether the filter dropdown is open or not
         */
        this._open = false;
        this.openChanged = new EventEmitter(false);
    }
    get open() {
        return this._open;
    }
    set open(open) {
        const boolOpen = !!open;
        if (boolOpen !== this._open) {
            this._open = boolOpen;
            this.openChanged.emit(boolOpen);
            if (!boolOpen && isPlatformBrowser(this.platformId)) {
                this.anchor.nativeElement.focus();
            }
        }
    }
    set customFilter(filter) {
        this.setFilter(filter);
    }
    /**
     * Indicates if the filter is currently active
     */
    get active() {
        return !!this.filter && this.filter.isActive();
    }
    /**
     * Shows/hides the filter dropdown
     */
    toggle() {
        this.open = !this.open;
    }
};
tslib_1.__decorate([
    ViewChild('anchor', { static: false, read: ElementRef }),
    tslib_1.__metadata("design:type", ElementRef)
], ClrDatagridFilter.prototype, "anchor", void 0);
tslib_1.__decorate([
    Input('clrDgFilterOpen'),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [Boolean])
], ClrDatagridFilter.prototype, "open", null);
tslib_1.__decorate([
    Output('clrDgFilterOpenChange'),
    tslib_1.__metadata("design:type", Object)
], ClrDatagridFilter.prototype, "openChanged", void 0);
tslib_1.__decorate([
    Input('clrDgFilter'),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], ClrDatagridFilter.prototype, "customFilter", null);
ClrDatagridFilter = ClrDatagridFilter_1 = tslib_1.__decorate([
    Component({
        selector: 'clr-dg-filter',
        // We register this component as a CustomFilter, for the parent column to detect it.
        providers: [{ provide: CustomFilter, useExisting: ClrDatagridFilter_1 }],
        template: `
        <button #anchor 
                (click)="toggle()"
                class="datagrid-filter-toggle"
                [class.datagrid-filter-open]="open" 
                [class.datagrid-filtered]="active"
                type="button">
            <clr-icon [attr.shape]="active ? 'filter-grid-circle': 'filter-grid'" class="is-solid"></clr-icon>
        </button>

        <ng-template [(clrPopoverOld)]="open" [clrPopoverOldAnchor]="anchor" [clrPopoverOldAnchorPoint]="anchorPoint"
             [clrPopoverOldPopoverPoint]="popoverPoint" [clrPopoverOldOptions]="popoverOptions">
            <div class="datagrid-filter">
                <!-- FIXME: this whole filter part needs a final design before we can try to have a cleaner DOM -->
                <div class="datagrid-filter-close-wrapper">
                    <button type="button" class="close" (click)="open = false">
                        <clr-icon shape="close" [attr.title]="commonStrings.keys.close"></clr-icon>
                    </button>
                </div>
    
                <ng-content></ng-content>
            </div>
        </ng-template>
    `
    }),
    tslib_1.__param(2, Inject(PLATFORM_ID)),
    tslib_1.__metadata("design:paramtypes", [FiltersProvider,
        ClrCommonStringsService,
        Object])
], ClrDatagridFilter);
export { ClrDatagridFilter };
//# sourceMappingURL=data:application/json;base64,